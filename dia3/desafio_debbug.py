# main.py
# -------------------------------------------------------------
# Treinando resolu√ß√£o de problemas ‚Äî Solu√ß√µes comentadas
# Cada exerc√≠cio abaixo cont√©m:
#   1) O c√≥digo corrigido (robusto e execut√°vel)
#   2) Uma explica√ß√£o logo abaixo, como coment√°rios
# No final h√° um "main()" que demonstra cada solu√ß√£o sem exigir entradas.
# -------------------------------------------------------------

from typing import Any, Iterable, List, Optional


# =============================================================
# ‚úÖ N√çVEL 1 ‚Äî F√ÅCIL
# =============================================================

# -------------------------------------------------------------
# Exerc√≠cio 1 ‚Äî Identificando um Erro de Sintaxe
# C√≥digo original (com erro): print("Ol√°, mundo!"
# Corre√ß√£o:
def ex1_ola_mundo() -> None:
    print("Ol√°, mundo!")

# Explica√ß√£o:
# O erro era um SyntaxError causado pela falta do par√™ntese de fechamento.
# Em Python, chamadas de fun√ß√£o precisam abrir e fechar par√™nteses.


# -------------------------------------------------------------
# Exerc√≠cio 2 ‚Äî Lidando com um NameError
def ex2_imprimir_nome() -> str:
    # Corre√ß√£o: definir a vari√°vel antes de us√°-la.
    nome = "Rafael"  # exemplo; poderia vir de input() ou de outra fonte
    msg = f"Nome definido: {nome}"
    print(msg)
    return msg

# Explica√ß√£o:
# O erro NameError ocorre quando o nome/vari√°vel n√£o existe no escopo atual
# (a vari√°vel ainda n√£o foi definida). A corre√ß√£o √© garantir que a vari√°vel
# seja criada (atribu√≠da) antes do acesso.


# =============================================================
# ‚úÖ N√çVEL 2 ‚Äî M√âDIO
# =============================================================

# -------------------------------------------------------------
# Exerc√≠cio 3 ‚Äî Erro de Tipagem (TypeError)
def somar_robusto(a: Any, b: Any) -> float:
    """
    Tenta somar 'a' e 'b' sem alterar a chamada original.
    Estrat√©gia:
      1) Tenta a soma direta (funciona se os tipos forem compat√≠veis).
      2) Em caso de TypeError, converte para float quando poss√≠vel.
      3) Se ainda falhar, lan√ßa um TypeError explicativo.
    """
    try:
        return a + b  # pode funcionar (ex.: n√∫meros, ou at√© strings)
    except TypeError:
        try:
            return float(a) + float(b)
        except (TypeError, ValueError):
            raise TypeError(f"N√£o foi poss√≠vel somar {type(a).__name__} e {type(b).__name__}.")

def ex3_demo() -> float:
    resultado = somar_robusto(10, "5")
    print(f"Ex3 ‚Äî Resultado da soma robusta: {resultado}")
    return resultado

# Explica√ß√£o:
# O erro era: TypeError: unsupported operand type(s) for +: 'int' and 'str'
# (n√£o √© poss√≠vel somar int com str). A solu√ß√£o captura o TypeError e tenta
# converter os valores para float, mantendo a chamada somar(10, "5").


# -------------------------------------------------------------
# Exerc√≠cio 4 ‚Äî Corrigindo um Erro de √çndice (IndexError)
def obter_elemento_por_indice(numeros: List[int], indice: Any) -> Optional[int]:
    """
    Valida e retorna o elemento do √≠ndice solicitado.
    - Rejeita √≠ndices n√£o inteiros e negativos.
    - Garante que o √≠ndice esteja dentro de [0, len(numeros)-1].
    - Usa try/except para evitar que o programa quebre.
    Retorna o elemento ou None quando inv√°lido.
    """
    try:
        idx = int(indice)
    except (TypeError, ValueError):
        print("√çndice inv√°lido: digite um n√∫mero inteiro.")
        return None

    if idx < 0 or idx >= len(numeros):
        print(f"√çndice fora do intervalo permitido (0 a {len(numeros)-1}).")
        return None

    try:
        valor = numeros[idx]
        print(f"Elemento no √≠ndice {idx}: {valor}")
        return valor
    except IndexError:
        # Defesa adicional (embora a checagem de faixa j√° evite isso)
        print("Erro: √≠ndice fora dos limites da lista.")
        return None

def ex4_demo() -> List[Optional[int]]:
    numeros = [10, 20, 30]
    testes = ["a", -1, 0, 2, 3]
    print("Ex4 ‚Äî Testando acesso por √≠ndice com entradas variadas:", testes)
    resultados = [obter_elemento_por_indice(numeros, t) for t in testes]
    return resultados

# Explica√ß√£o:
# O c√≥digo original quebrava por:
# - ValueError ao converter entradas n√£o num√©ricas com int(input(...)).
# - IndexError ao acessar um √≠ndice fora da faixa da lista.
# A corre√ß√£o valida o tipo e a faixa do √≠ndice e usa try/except para
# tratar erros graciosamente, incluindo rejeitar √≠ndices negativos.


# -------------------------------------------------------------
# Exerc√≠cio 5 ‚Äî Tratando m√∫ltiplos erros ao mesmo tempo
def dividir(a: float, b: float) -> float:
    return a / b

def dividir_com_tratamento(num1_str: str, num2_str: str) -> Optional[float]:
    """
    Converte entradas para float e divide com tratamento de erros:
      - ValueError: entradas n√£o num√©ricas
      - ZeroDivisionError: divis√£o por zero
      - TypeError: entradas inesperadas
    Retorna o resultado ou None se houver erro (com mensagem amig√°vel).
    """
    try:
        a = float(num1_str)
        b = float(num2_str)
        resultado = dividir(a, b)
        print(f"Resultado: {resultado}")
        return resultado
    except ValueError:
        print("Erro: voc√™ deve digitar n√∫meros v√°lidos (ex.: 10, 3.5).")
    except ZeroDivisionError:
        print("Erro: divis√£o por zero n√£o √© permitida.")
    except TypeError:
        print("Erro: tipos inv√°lidos recebidos.")
    return None

def ex5_demo() -> List[Optional[float]]:
    print("Ex5 ‚Äî Demonstra√ß√£o com v√°rias entradas:")
    casos = [("10", "2"), ("x", "3"), ("4", "0"), ("5.5", "2.2")]
    resultados = []
    for a, b in casos:
        print(f" Tentando dividir {a} por {b} -> ", end="")
        resultados.append(dividir_com_tratamento(a, b))
    return resultados

# Explica√ß√£o:
# Poss√≠veis erros:
# - ValueError: quando o usu√°rio insere texto em vez de n√∫mero.
# - ZeroDivisionError: quando o segundo n√∫mero √© zero.
# - TypeError: quando os tipos recebidos n√£o s√£o os esperados.
# A solu√ß√£o converte entradas para float e captura cada erro com uma
# mensagem clara, evitando a quebra do programa.


# =============================================================
# ‚úÖ N√çVEL 3 ‚Äî DIF√çCIL
# =============================================================

# -------------------------------------------------------------
# Exerc√≠cio 6 ‚Äî Erro ao trabalhar com dicion√°rios
def acessar_dict_com_tratamento(dados: dict, chave: str) -> Optional[Any]:
    """
    Tenta acessar dados[chave] com tratamento de erro.
    Tamb√©m mostra como usar get() para fornecer um padr√£o amig√°vel.
    """
    try:
        valor = dados[chave]
        print(f"O valor da chave '{chave}' √©: {valor}")
        return valor
    except KeyError:
        padrao = dados.get(chave, "Chave n√£o encontrada (via get()).")
        print(f"Chave inexistente. Retornando padr√£o: {padrao}")
        return None

def ex6_demo() -> List[Optional[Any]]:
    dados = {"nome": "Isaac", "idade": 25, "cidade": "S√£o Paulo"}
    testes = ["nome", "idade", "endereco", "cidade"]
    print("Ex6 ‚Äî Testando acesso a chaves:", testes)
    resultados = [acessar_dict_com_tratamento(dados, t) for t in testes]
    # Exemplo expl√≠cito de get():
    exemplo_get = dados.get("endereco", "Endere√ßo n√£o encontrado (via get()).")
    print("Ex6 ‚Äî Exemplo com get():", exemplo_get)
    return resultados

# Explica√ß√£o:
# Acesso a uma chave inexistente gera KeyError. Com try/except, tratamos o
# erro e podemos fornecer mensagens amig√°veis. O m√©todo dict.get(chave, padrao)
# evita o erro, retornando o valor da chave se existir ou o padr√£o fornecido.


# -------------------------------------------------------------
# Exerc√≠cio 7 ‚Äî Criando um erro personalizado (valida√ß√£o de idade)
class IdadeInvalidaError(ValueError):
    """Erro espec√≠fico para idades fora do intervalo permitido."""

def validar_idade(idade: int) -> str:
    if idade < 0 or idade > 120:
        # Lan√ßamos um erro espec√≠fico (derivado de ValueError)
        raise IdadeInvalidaError("A idade deve estar entre 0 e 120 anos!")
    return f"Idade v√°lida: {idade}"

def solicitar_idade_valida(entradas: Iterable[Any]) -> Optional[str]:
    """
    Simula m√∫ltiplas tentativas de entrada at√© uma idade v√°lida ser fornecida.
    Recebe um iter√°vel de entradas (para teste sem input()) e retorna a mensagem.
    """
    for tentativa in entradas:
        try:
            idade = int(tentativa)
            msg = validar_idade(idade)
            print(msg)
            return msg
        except (TypeError, ValueError):
            print("Entrada inv√°lida: digite um n√∫mero inteiro.")
        except IdadeInvalidaError as e:
            print(f"Erro de valida√ß√£o: {e}")
    print("N√£o foi poss√≠vel obter uma idade v√°lida nas tentativas fornecidas.")
    return None

def ex7_demo() -> List[Optional[str]]:
    print("Ex7 ‚Äî Testando validador de idade com entradas inv√°lidas e v√°lidas.")
    casos = [[-5, 130, "x", 40], [25]]
    resultados = []
    for seq in casos:
        print(f"  Tentativas: {seq}")
        resultados.append(solicitar_idade_valida(seq))
    return resultados

# Explica√ß√£o:
# Corrigimos a sintaxe da fun√ß√£o (faltava ':') e adicionamos um loop de tentativas
# simuladas para continuar pedindo at√© obter uma idade v√°lida.
# Lan√ßamos um erro espec√≠fico (IdadeInvalidaError) ao inv√©s de ValueError gen√©rico
# e capturamos tanto entradas n√£o num√©ricas quanto idades fora do intervalo.


# =============================================================
# üí° DESAFIO EXTRA ‚Äî Debugando um c√≥digo com m√∫ltiplos erros
# =============================================================
def calcular_media_segura(notas: Iterable[Any]) -> float:
    """
    Converte as notas para float e calcula a m√©dia com valida√ß√µes.
    - Rejeita notas n√£o num√©ricas
    - Rejeita lista vazia
    """
    coerced: List[float] = []
    for n in notas:
        try:
            coerced.append(float(n))
        except (TypeError, ValueError):
            raise ValueError(f"Nota inv√°lida: {n!r}. Use apenas n√∫meros.")
    if not coerced:
        raise ValueError("Lista de notas vazia. Informe ao menos uma nota.")
    return sum(coerced) / len(coerced)

def ler_notas_de_string(entrada: str) -> List[float]:
    """
    Aceita uma string com notas separadas por espa√ßo ou v√≠rgula e retorna uma lista de floats.
    Ex.: '8 9 10 7' ou '8,9,10,7'
    """
    if not entrada or not entrada.strip():
        raise ValueError("Entrada vazia.")
    # Normaliza separadores
    entrada = entrada.replace(",", " ")
    partes = [p for p in entrada.split() if p.strip()]
    return [float(p) for p in partes]

def ex_desafio_demo() -> float:
    # Corrigindo a lista original que continha uma string "10" (que agora √© tratada)
    notas = [8, 9, "10", 7]
    media = calcular_media_segura(notas)
    print(f"Desafio ‚Äî M√©dia: {media:.2f}")
    # Demonstra√ß√£o de leitura a partir de uma "entrada do usu√°rio" simulada:
    entrada_usuario = "6.5, 7, 8, 9"
    notas_usuario = ler_notas_de_string(entrada_usuario)
    media_usuario = calcular_media_segura(notas_usuario)
    print(f"Desafio ‚Äî M√©dia (usu√°rio): {media_usuario:.2f}")
    return media

# Explica√ß√£o:
# Problemas no c√≥digo original:
# 1) A lista tinha uma string "10". sum([8, 9, "10", 7]) gera TypeError.
# 2) Formata√ß√£o {media:.2f} exige n√∫mero; se a m√©dia fosse None ou inv√°lida, quebraria.
# 3) Lista vazia geraria ZeroDivisionError ao dividir por zero.
# Corre√ß√µes:
# - Convertemos todas as notas para float e validamos a lista.
# - Lan√ßamos mensagens claras para entradas inv√°lidas.
# - Fornecemos fun√ß√£o para ler notas de string (simulando entrada do usu√°rio).


# =============================================================
# Fun√ß√£o principal que demonstra todas as solu√ß√µes sem entradas reais
# =============================================================
def main() -> None:
    print("\n=== N√≠vel 1 ===")
    ex1_ola_mundo()
    ex2_imprimir_nome()

    print("\n=== N√≠vel 2 ===")
    ex3_demo()
    ex4_demo()
    ex5_demo()

    print("\n=== N√≠vel 3 ===")
    ex6_demo()
    ex7_demo()

    print("\n=== Desafio Extra ===")
    ex_desafio_demo()


if __name__ == "__main__":
    main()
